/**
 * This code was generated by IniDefineGenerator
 * Copylight (C)boldowa
 */
#pragma once

#define CAppConfigDefines_DECLARE() \
	int posX; \
	int posY; \
	CString inputPath; \
	CString outputPath; \
	bool enableSkipHeader; \
	bool disableHexDump; \
	bool is8bitsAccumlator; \
	bool is8bitsIndexRegister; \
	bool disableBoundary; \
	bool enableSplit; \
	bool enable1BankDisassemble; \
	bool disableDisassemble; \
	bool enableOrigin; \
	bool enableRange; \
	int hexWidth; \
	CString disassembleBank; \
	CString originAddress; \
	CString beginAddress; \
	CString endAddress; \
	BankMode bankMode; \
	ShadowAddressMode shadowMode; \

#define CAppConfigDefines_INIT() \
	this->posX = CW_USEDEFAULT; \
	this->posY = CW_USEDEFAULT; \
	this->inputPath = _T(""); \
	this->outputPath = _T(""); \
	this->enableSkipHeader = false; \
	this->disableHexDump = false; \
	this->is8bitsAccumlator = true; \
	this->is8bitsIndexRegister = true; \
	this->disableBoundary = false; \
	this->enableSplit = true; \
	this->enable1BankDisassemble = false; \
	this->disableDisassemble = false; \
	this->enableOrigin = false; \
	this->enableRange = false; \
	this->hexWidth = 16; \
	this->disassembleBank = _T("0"); \
	this->originAddress = _T("8000"); \
	this->beginAddress = _T("8000"); \
	this->endAddress = _T("FFFF"); \
	this->bankMode = BankMode_Auto; \
	this->shadowMode = ShadowAddress_Auto; \

#define CAppConfigDefines_GET(STRUCT) \
	STRUCT cfg = { \
		this->posX, \
		this->posY, \
		this->inputPath, \
		this->outputPath, \
		this->enableSkipHeader, \
		this->disableHexDump, \
		this->is8bitsAccumlator, \
		this->is8bitsIndexRegister, \
		this->disableBoundary, \
		this->enableSplit, \
		this->enable1BankDisassemble, \
		this->disableDisassemble, \
		this->enableOrigin, \
		this->enableRange, \
		this->hexWidth, \
		this->disassembleBank, \
		this->originAddress, \
		this->beginAddress, \
		this->endAddress, \
		this->bankMode, \
		this->shadowMode, \
	}; \
	return cfg; \

#define CAppConfigDefines_APPLY(INSTANCE) \
	this->posX = INSTANCE.posX; \
	this->posY = INSTANCE.posY; \
	this->inputPath = INSTANCE.inputPath; \
	this->outputPath = INSTANCE.outputPath; \
	this->enableSkipHeader = INSTANCE.enableSkipHeader; \
	this->disableHexDump = INSTANCE.disableHexDump; \
	this->is8bitsAccumlator = INSTANCE.is8bitsAccumlator; \
	this->is8bitsIndexRegister = INSTANCE.is8bitsIndexRegister; \
	this->disableBoundary = INSTANCE.disableBoundary; \
	this->enableSplit = INSTANCE.enableSplit; \
	this->enable1BankDisassemble = INSTANCE.enable1BankDisassemble; \
	this->disableDisassemble = INSTANCE.disableDisassemble; \
	this->enableOrigin = INSTANCE.enableOrigin; \
	this->enableRange = INSTANCE.enableRange; \
	this->hexWidth = INSTANCE.hexWidth; \
	this->disassembleBank = INSTANCE.disassembleBank; \
	this->originAddress = INSTANCE.originAddress; \
	this->beginAddress = INSTANCE.beginAddress; \
	this->endAddress = INSTANCE.endAddress; \
	this->bankMode = INSTANCE.bankMode; \
	this->shadowMode = INSTANCE.shadowMode; \

#define CAppConfigDefines_KEYDECS() \
	static const TCHAR* KeyPosX; \
	static const TCHAR* KeyPosY; \
	static const TCHAR* KeyInputPath; \
	static const TCHAR* KeyOutputPath; \
	static const TCHAR* KeyEnableSkipHeader; \
	static const TCHAR* KeyDisableHexDump; \
	static const TCHAR* KeyIs8bitsAccumlator; \
	static const TCHAR* KeyIs8bitsIndexRegister; \
	static const TCHAR* KeyDisableBoundary; \
	static const TCHAR* KeyEnableSplit; \
	static const TCHAR* KeyEnable1BankDisassemble; \
	static const TCHAR* KeyDisableDisassemble; \
	static const TCHAR* KeyEnableOrigin; \
	static const TCHAR* KeyEnableRange; \
	static const TCHAR* KeyHexWidth; \
	static const TCHAR* KeyDisassembleBank; \
	static const TCHAR* KeyOriginAddress; \
	static const TCHAR* KeyBeginAddress; \
	static const TCHAR* KeyEndAddress; \
	static const TCHAR* KeyBankMode; \
	static const TCHAR* KeyShadowMode; \

#define CAppConfigDefines_KEYDEFS(CLASS) \
	const TCHAR* CLASS::KeyPosX = _T("PosX"); \
	const TCHAR* CLASS::KeyPosY = _T("PosY"); \
	const TCHAR* CLASS::KeyInputPath = _T("InputPath"); \
	const TCHAR* CLASS::KeyOutputPath = _T("OutputPath"); \
	const TCHAR* CLASS::KeyEnableSkipHeader = _T("EnableSkipHeader"); \
	const TCHAR* CLASS::KeyDisableHexDump = _T("DisableHexDump"); \
	const TCHAR* CLASS::KeyIs8bitsAccumlator = _T("Is8bitsAccumlator"); \
	const TCHAR* CLASS::KeyIs8bitsIndexRegister = _T("Is8bitsIndexRegister"); \
	const TCHAR* CLASS::KeyDisableBoundary = _T("DisableBoundary"); \
	const TCHAR* CLASS::KeyEnableSplit = _T("EnableSplit"); \
	const TCHAR* CLASS::KeyEnable1BankDisassemble = _T("Enable1BankDisassemble"); \
	const TCHAR* CLASS::KeyDisableDisassemble = _T("DisableDisassemble"); \
	const TCHAR* CLASS::KeyEnableOrigin = _T("EnableOrigin"); \
	const TCHAR* CLASS::KeyEnableRange = _T("EnableRange"); \
	const TCHAR* CLASS::KeyHexWidth = _T("HexWidth"); \
	const TCHAR* CLASS::KeyDisassembleBank = _T("DisassembleBank"); \
	const TCHAR* CLASS::KeyOriginAddress = _T("OriginAddress"); \
	const TCHAR* CLASS::KeyBeginAddress = _T("BeginAddress"); \
	const TCHAR* CLASS::KeyEndAddress = _T("EndAddress"); \
	const TCHAR* CLASS::KeyBankMode = _T("BankMode"); \
	const TCHAR* CLASS::KeyShadowMode = _T("ShadowMode"); \

